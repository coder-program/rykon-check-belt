import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UseGuards,
  Query,
  Request,
} from '@nestjs/common';
import { UsuariosService } from '../services/usuarios.service';
import { CreateUsuarioDto } from '../dto/create-usuario.dto';
import {
  ApiOperation,
  ApiTags,
  ApiBearerAuth,
  ApiResponse,
  ApiQuery,
} from '@nestjs/swagger';
import { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';
import { PermissionsGuard } from '../../auth/guards/permissions.guard';
import { Permissions } from '../../auth/decorators/permissions.decorator';

@ApiTags('üë• Usu√°rios')
@ApiBearerAuth('JWT-auth')
@Controller('usuarios')
export class UsuariosController {
  constructor(private readonly usuariosService: UsuariosService) {}

  @Post()
  @ApiOperation({
    summary: '‚ûï Criar novo usu√°rio',
    description: 'Cria um novo usu√°rio no sistema com perfil e permiss√µes',
  })
  @ApiResponse({ status: 201, description: '‚úÖ Usu√°rio criado com sucesso' })
  @ApiResponse({
    status: 400,
    description: '‚ùå Dados inv√°lidos ou email j√° existe',
  })
  create(@Body() createUsuarioDto: CreateUsuarioDto) {
    return this.usuariosService.create(createUsuarioDto);
  }

  @UseGuards(JwtAuthGuard)
  @Get()
  @ApiOperation({
    summary: 'üìã Listar usu√°rios',
    description:
      'Lista todos os usu√°rios com filtro hier√°rquico baseado no perfil do usu√°rio autenticado',
  })
  @ApiQuery({
    name: 'perfil',
    required: false,
    description: 'Filtrar por tipo de perfil espec√≠fico',
  })
  @ApiResponse({ status: 200, description: '‚úÖ Lista de usu√°rios retornada' })
  @ApiResponse({ status: 401, description: '‚ùå Token inv√°lido ou expirado' })
  findAll(@Query('perfil') perfil?: string, @Request() req?) {
    if (perfil) {
      return this.usuariosService.findByPerfil(perfil);
    }

    // Passar usu√°rio autenticado para aplicar filtro hier√°rquico
    return this.usuariosService.findAllWithHierarchy(req.user);
  }

  @UseGuards(JwtAuthGuard, PermissionsGuard)
  @Permissions('usuarios:aprovar')
  @Get('pendentes/list')
  @ApiOperation({
    summary: 'Listar usu√°rios com cadastro completo aguardando aprova√ß√£o',
  })
  async getPendentes(@Request() req) {
    const result = await this.usuariosService.findPendingApproval(req.user);

    return result;
  }

  @Get('debug/all-status')
  @ApiOperation({ summary: 'Debug - Listar todos os usu√°rios com seus status' })
  async getDebugAllStatus() {
    return this.usuariosService.findAll();
  }

  @Get(':id')
  @ApiOperation({ summary: 'Obter usu√°rio por ID' })
  findOne(@Param('id') id: string) {
    return this.usuariosService.findOne(id);
  }

  @Get(':id/permissions')
  @ApiOperation({ summary: 'Listar permiss√µes de um usu√°rio' })
  getUserPermissions(@Param('id') id: string) {
    return this.usuariosService.getUserPermissions(id);
  }

  @Patch(':id')
  @ApiOperation({ summary: 'Atualizar usu√°rio' })
  update(
    @Param('id') id: string,
    @Body() updateUsuarioDto: Partial<CreateUsuarioDto>,
  ) {
    return this.usuariosService.update(id, updateUsuarioDto);
  }

  @Delete(':id')
  @ApiOperation({ summary: 'Remover usu√°rio' })
  remove(@Param('id') id: string) {
    return this.usuariosService.remove(id);
  }

  @UseGuards(JwtAuthGuard, PermissionsGuard)
  @Permissions('usuarios:aprovar')
  @Patch(':id/aprovar')
  @ApiOperation({ summary: 'Aprovar usu√°rio e ativar sua conta' })
  aprovar(@Param('id') id: string) {
    return this.usuariosService.approveUser(id);
  }

  @UseGuards(JwtAuthGuard)
  @Patch(':id/rejeitar')
  @ApiOperation({ summary: 'Rejeitar cadastro de usu√°rio' })
  rejeitar(@Param('id') id: string) {
    return this.usuariosService.rejectUser(id);
  }
}
